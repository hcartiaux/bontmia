#!/usr/bin/env bash
#
# bontmia (Backup Over Network To Multiple Incremental Archives)
#
# This was written to get the functionality of glastree (Jeremy Wohl)
# available to use towards remote hosts and having a selective long
# term storage.
#
# Original author:
#   (c) 2003 John Enok Vollestad <john.enok@vollestad.no>
#       http://folk.uio.no/johnen/bontmia/
#
# Bugfixes and enhancements:
#   (c) 2012 Marcel Pennewiss    <opensource@pennewiss.de>
#       https://github.com/mape2k/bontmia/
#   (c) 2014-2024 Hyacinthe Cartiaux  <hyacinthe.cartiaux@free.fr>
#       https://github.com/hcartiaux/bontmia/
#   (c) 2024-2025 Fotis Georgatos  <kefalonia@gmail.com>
#       https://github.com/fgeorgatos/bontmia/

print_usage()
{
    cat <<EOF | ${PAGER:-more}
NAME
  bontmia - Backup Over Network To Multiple Incremental Archives

SYNOPSIS
  bontmia --dest <dest. dir> [options] [source dir [source dir ...]]

DESCRIPTION

  bontmia is a network-based backup tool that saves a configurable numbers of last
  month, week, day, hour, and minute backups. Each backup is a complete snapshot
  of the original directories. Only new and changed files are copied
  over the network when generating a snapshot. Remote access is implemented
  securely using ssh. Unchanged files are stored as hard links in the archive
  and therefore take virtually no space.

  The backups are stored in a directory structure in the format YYYY/MM/DD/HH:MM.
  Each directory contains a snapshot of the backed-up directories. This is
  stored incrementally by hard-linking any files that haven't changed between
  backups to the same file in the previous backup. The actual copying is done
  with rsync. To avoid typing a password, you can generate a public key on the
  host where the backup is stored (refer to the ssh manual page) and add it to
  the list of authorized hosts on the remote computer (refer to the sshd manual
  page).

  The duration for which each backup is stored is configurable; see below.

  The return value is 0 on success and 1 if backing up one of the sources failed.

  The destination cannot be remote. If you want to place the backup on a remote
  server, then run bontmia as a command with ssh:

      $ ssh user@host.domain bontmia <options>

  Use at your own risk.

ARGUMENTS

  --dest <dir>

    Sets the destination directory where the backups are placed.
    WARNING! Existing files in this directory will be DELETED!

OPTIONS

  --rotation <spec>

  Specifies the number of backups in each category to save.
  The 'spec' is of the form:

  [0-9]*minutes[0-9]*hours[0-9]*days[0-9]*weeks[0-9]*month[0-9]*years

  For example, 0minutes0hours7days4weeks12month2years is for a daily backup.
  Bontmia should be run in cron or manually; the numbers given here only
  specify how many backups to save.

  The different categories (minutes, hours...) are just overlapping filters.
  More than one filter might match a backup, and a backup is removed when no
  filter matches it anymore.

  For example, if the number of days is 3, the last backup within each of the
  last 3 days when backups were done will be kept. If you do your backups like
  this (where 'y' means the backup was done and '-' means it was not), on day 5,
  the backups of day 2, 4, and 5 will be saved, and the backup of day 0 will be
  removed.

    day:    0 1 2 3 4 5
    backup: y - y - y y

  Use the dryrun option below to experiment and learn more about this option.

  --dryrun

  When this option is used, the backup is not performed, but the backups to be
  removed are listed. This is handy when you want to ensure that you do not
  remove all your precious backups when used in combination with the rotation
  option.

  --bwlimit <number>

  Specifies a maximum transfer rate in kilobytes per second. This option is
  most effective with large files (several megabytes and up). Due to the nature
  of rsync transfers, blocks of data are sent; then, if rsync determines the
  transfer was too fast, it will wait before sending the next data block. The
  result is an average transfer rate equaling the specified limit. A value of
  zero specifies no limit. The default is no limit.

  --temp <temp dir>

  Specifies the directory used for temporary files during transfer.
  NB! This MUST be on the same disk volume as the destination or incremental copy
...skipping...

  Specifies the port number to connect to on the remote host when using ssh,
  which is the only option.

  --cipher <cipher_spec>

  Selects the cipher specification for encrypting the ssh session. Refer to
  ssh(1) and ssh_config(5) for a list of supported ciphers.

  --identity <file>

  Specifies the private key file for ssh.

  --exclude-from <file>

  Read rsync exclude patterns from file.

  --sudo

  Execute rsync with sudo on remote.

  --stats

  Output rsync stats at the end.

  --compression

  Enable rsync compression, which can be useful over a slow network link or
  counterproductive over a fast link.

ENVIRONMENT

  RSYNC_CMD

  bontmia uses any rsync parameters specified in this variable.

EXAMPLES

  Short examples and explanations:


      $ bontmia --dest ./backup --rotation 5minutes0hours0days0weeks0month0years foo@bar:/baz/zoot

  A backup of foo@bar:/baz/zoot is made in the directory ./backup on the
  local host. If this command is run every minute, bontmia keeps a backup for
  every minute for the last 5 minutes. If it is run once every day, bontmia will
  keep the last 5 backups done at unique minutes.

  Hint: Set the values for times shorter than the interval used
  when doing backups to 0.


      $ bontmia --dest ./backup --rotation 0minutes0hours7days4weeks12month0years foo@bar:/baz/zoot

  Here, at most, 7 + 4 + 12 backups will be stored (minus overlap between
  the backups). This can be a good command to run nightly.


      $ bontmia --dest ./backup --rotation 0minutes24hours7days4weeks12month0years foo@bar:/baz/zoot

  This is for running every hour. Remember that only the changes are transferred,
  and running more frequently than every hour does not necessarily mean copying
  more data over the network.


      $ bontmia --dryrun --dest ./backup --rotation 0minutes24hours7days4weeks12month0years /home/bar/baz foo.no:/var/db

  With the dryrun option, bontmia shows what would happen if the backup
  were run. No action on the file system will be done.

  When bontmia runs, it sends its output to standard output. If you do not
  want this, you can redirect it to /dev/null.

MANPAGE

  The manpage has been generated with this command:

      $ bontmia --help | txt2man -t bontmia -B bontmia -s 1 > bontmia.1

SEE ALSO
  rsync(1) ssh(1) ssh_config(5)

CONTACT
  Bontmia was written in April 2003 by John Enok Vollestad to merge the
  functionality of glastree and rsync in one application with a more flexible
  selection of long-term storage.
  It has later undergone some bug fixes and enhancements.

  This version is a fork; the diff can be found on GitHub: https://github.com/hcartiaux/bontmia

EOF
    exit 1
}


unlock_destination()
{
    rm -f "${tmpdir}/is_running.lock"    > /dev/null 2>&1
    rm -f /tmp/bontmia_rsync_output.$$   > /dev/null 2>&1
    rm -f /tmp/bontmia_rsync_output.$$.2 > /dev/null 2>&1
}

output_rsync_stats()
{
    echo ""
    echo "Rsync statistics"
    echo ""
    sed -n '/^Number of files: .*$/,/^total size is$/p' /tmp/bontmia_rsync_output.$$
}

lock_destination()
{
    # Ensure that there is no other bontmia running against the same destination
    touch /tmp/bontmia_lock_file.$$
    echo "no" | mv -i /tmp/bontmia_lock_file.$$ "${tmpdir}"/is_running.lock 2>&1 | \
    grep "overwrite" >/dev/null 2>&1 && {
        echo "Bontmia is already doing a backup on this tmpdir:"
        echo "    ${tmpdir}"
        echo
        echo "    If you are sure this is false you can manually remove the lockfile:"
        echo "        ${tmpdir}/is_running.lock"
        echo
        exit 1
    }
}


filter_template()
{
    attribute="$1"
    grep_value="$2"
    last_number="$3"
    sort_options="$4"
    template_name="$5"

    if test "x${sort_options}" != x; then
        sort="sort ${sort_options}"
    else
        sort="cat"
    fi

    (
        cd "${backup_destination}"
        for archive in */*/*/*; do
            year=$(     echo "${archive}" | cut -f1 -d'/')
            month=$(    echo "${archive}" | cut -f2 -d'/')
            day=$(      echo "${archive}" | cut -f3 -d'/')
            the_clock=$(echo "${archive}" | cut -f4 -d'/')

            the_date="${year}-${month}-${day}"
            date -d "${the_date}" "+%Y/%m/%d/${the_clock}@${template_name}@${attribute}" || {
                echo "Could not read the time of a previous backup"
                echo "Please email the author"
                unlock_destination
                exit 1
            }
        done | grep -E "@.*@${grep_value}" | sort -r | $sort | tail -$last_number
    )
}


handle_last_unfinished()
{
    if test -d "${tmpdir}/unfinished_backup"; then
        echo
        echo "WARNING: Last backup did not complete"
        echo "  This unfinished backup is now removed"
        echo
        chmod -R u+w "${tmpdir}/unfinished_backup"
        rm -rf "${tmpdir}/unfinished_backup"
    fi
}


moving_complete_backup_into_archive()
{
    echo
    echo "Moving the complete backup into the backup archive"
    echo "  ($tmpdir/unfinished_backup -> $backup_destination/)"

    if test "x$dryrun" = "xno"; then
        mkdir -p "$backup_destination/$this_backup" || {
            unlock_destination
            exit 1
        }
        mv "$tmpdir/unfinished_backup/$this_backup/"* "$backup_destination/$this_backup/" || {
            unlock_destination
            exit 1
        }
    fi
}


do_the_backup_exist()
{
    if test -e "${backup_destination}/$1"; then
        echo "The backup destination already exist"
        echo "This means that there is less than a minute since the last backup"
        unlock_destination
        exit 1
    fi
}


make_backup()
{
    this_backup="$(date +%Y)/$(date +%m)/$(date +%d)/$(date +%H:%M)"

    do_the_backup_exist "$this_backup"

    handle_last_unfinished


    last_backup=$(find "${backup_destination}" -maxdepth 4 -mindepth 4 | sort | tail -1)
    if test "x${last_backup}" != "x" ; then
        echo "Hardlink to files in last backup when unchanged"
        echo "  (${last_backup})"
        if test "x${dryrun}" = "xno"; then
            mkdir -p "${tmpdir}/unfinished_backup/${this_backup}" || {
                unlock_destination
                exit 1
            }
            first="no"
        fi
    else
        echo "No previous backup detected, will start with an empty replication"
        if test "x${dryrun}" = "xno"; then
            mkdir -p "${tmpdir}/unfinished_backup/$this_backup" || {
                unlock_destination
                exit 1
            }
            first="yes"
        fi
    fi

    for dir in "${backup_dirs[@]}"; do
        dir_wo_user=$(echo "${dir}" | cut -f2- -d'@')
        echo "  ${dir_wo_user}"
        hostname=$(echo "${dir}" | cut -f2- -d'@' | cut -f1 -d':')":"

        if test "x${hostname}" = "x$(hostname):"; then
            # remove hostname from dir to speed up local backup
            dir=$(echo "$dir" | cut -f2 -d':')
        fi
        if test "x${last_backup}" != "x" && test -d "${last_backup}/${hostname}"; then
            # set the arglink-dest parameter to the last backup
            linkdest="${last_backup}/${hostname}/"
        fi
        if test "x${dryrun}" = "xno"; then
            mkdir -p "${tmpdir}/unfinished_backup/${this_backup}/${hostname}"

            rsync ${RSYNC_CMD} ${rsync_options} ${excludefrom:+--exclude-from="$excludefrom"} ${linkdest:+--link-dest="${linkdest}"} \
                  -T "${tmpdir}" ${rsyncpath:+--rsync-path="${rsyncpath}"} -e "ssh $cipher -p $port $identity"          \
                  "${dir}/" "${tmpdir}/unfinished_backup/$this_backup/${hostname}" 2>&1 >/tmp/bontmia_rsync_output.$$ || {
                rsync_exit_status=$?
                echo
                echo "  Caught an error doing rsync (return code ${rsync_exit_status})"
                echo "  The last 10 lines of output from rsync:"
                tail -10 /tmp/bontmia_rsync_output.$$
                echo
                echo "  Retrying rsync..."
                rsync ${RSYNC_CMD} ${rsync_options} ${excludefrom:+--exclude-from="$excludefrom"} ${linkdest:+--link-dest="${linkdest}"} \
                      -T "${tmpdir}" ${rsyncpath:+--rsync-path="${rsyncpath}"} -e "ssh $cipher -p $port $identity"          \
                      "${dir}/" "${tmpdir}/unfinished_backup/$this_backup/${hostname}" 2>&1 >/tmp/bontmia_rsync_output.$$.2 || {
                    rsync_exit_status=$?
                    # The backup is considered successfull, even if some files have vanished during the transfer
                    if [[ $rsync_exit_status != 24 && $rsync_exit_status != 23 ]]; then
                        exit_status=1
                        echo
                        echo "  Still no luck. Rsync failed with returncode ${rsync_exit_status}"
                        echo "  ${dir}"
                        echo "  Please check that there is room for all the data"
                        echo "  The last 10 lines of output from rsync:"
                        tail -10 /tmp/bontmia_rsync_output.$$.2
                        echo

                        # Stop the backup, and clean
                        break
                    fi
                }
            }
        fi
        echo
        echo "  Continuing with the next backup source"
        echo
    done

    if [[ $exit_status = 0 ]]; then
        moving_complete_backup_into_archive
    else
        echo "  rsync failed, removing the unfinished backup"
    fi

    if test "x${dryrun}" = "xno"; then
        chmod -R u+w "${tmpdir}/unfinished_backup"
        rm -rf "$tmpdir/unfinished_backup"
    fi
}


delete_old_backup()
{
    echo
    echo "Calculates which backups to save"
    echo "(${filter_minutes} minutes, ${filter_hours} hours, ${filter_days} days, ${filter_weeks} weeks, ${filter_monthly} months, ${filter_years} years)"

    # by saving the x last, the backups will not be deleted even if no
    # new backups is created

    archives_with_filter=$(
    if ! test "0${filter_minutes}" -ge 0 2>/dev/null; then
        print_usage
    else
        filter_template "" "" "${filter_minutes}" "-u" "minutes"
    fi

    if ! test "0${filter_hours}" -ge 0 2>/dev/null; then
        print_usage
    else
        filter_template "" "" "${filter_hours}" "-u -k 1,1 -t :" "hours"
    fi

    if ! test "0${filter_days}" -ge 0 2>/dev/null; then
        print_usage
    else
        filter_template "" "" "${filter_days}" "-u -k 1,3 -t /" "days"
    fi

    if ! test "0${filter_weeks}" -ge 0 2>/dev/null; then
        print_usage
    else
        filter_template "%G-%V" "" "${filter_weeks}" "-u -k 3 -t @" "weeks"
    fi

    if ! test "0${filter_monthly}" -ge 0 2>/dev/null; then
        print_usage
    else
        filter_template "%B" "" "${filter_monthly}" "-u -k 1,2 -t /" "months"
    fi

    if ! test "0${filter_years}" -ge 0 2>/dev/null; then
        print_usage
    else
        filter_template "%Y" "" "${filter_years}" "-u -k 1,1 -t /" "years"
    fi
    )

    archives_to_save=$(echo "${archives_with_filter}" | cut -f1 -d'@' | sort -u)

    (
    cd "${backup_destination}"
    for archive in */*/*/*; do
        if ! echo "${archives_to_save}" | grep "^${archive}$" >/dev/null; then
            echo " Removing ${backup_destination}/$archive"
            if test "x${dryrun}" = "xno"; then
                chmod -R u+w "${archive}"
                rm -rf "${archive}"
                rmdir -p $(echo "${archive}" | cut -f1-3 -d'/') 2>/dev/null
            fi
        else
            printf "  Saving %s/%s by filters:  " "$backup_destination" "$archive"
            filters=$(echo "${archives_with_filter}" | grep "${archive}" | cut -f2 -d'@')
            echo $filters
        fi
    done
    )
}


knead_source_path()
{
    source="$1"

    # remove trailing '/'
    if echo "${source}" | grep "/$" >/dev/null; then
        source=$(echo "${source}" | sed -e 's/\/$//')
    fi

    # make the path absolute
    if ! echo "${source}" | grep ":"  >/dev/null  &&
       ! echo "${source}" | grep "^/" >/dev/null; then
        if echo "${source}" | grep "^./" >/dev/null; then
            source=$(echo "${source}" | sed -e 's/^\.\///')
        fi
        source="${current_dir}/${source}"
    fi

    echo "${source}"
}


knead_dest_path()
{
    dest="$1"

    if echo "${dest}" | grep ":" >/dev/null; then
        # The destination can not be remote
        print_usage
    fi

    # remove trailing '/'
    if echo "${dest}" | grep "/$" >/dev/null; then
        dest=$(echo "${dest}" | sed -e 's/\/$//')
    fi

    # make the path absolute
    if ! echo "${dest}" | grep "^/" >/dev/null; then
        if echo "${dest}" | grep "^./" >/dev/null; then
            dest=$(echo "${dest}" | sed -e 's/^\.\///')
        fi
        dest="${current_dir}/${dest}"
    fi

    echo "$dest"
}


check_program()
{
    program="$1"
    command -v "${program}"                         >/dev/null 2>&1 || {
        echo "You need ${program} installed and in the path"
        echo "Aborting"
        unlock_destination
        exit 1
    }
}

check_for_programs()
{
    check_program ssh
    check_program whoami
    check_program perl
    check_program host
    check_program touch
    check_program stat
    check_program rm
    check_program rmdir
    check_program mkdir
    check_program chmod
    check_program cat
    check_program cut
    check_program sed
    check_program sort
    check_program grep
    check_program tail

    check_program rsync
    rsync --help | grep link-dest                > /dev/null 2>&1 || {
        echo "'rsync' on your system does not support the 'link-dest' option"
        echo "Your rsync version might be too old"
        echo "Aborting"
        unlock_destination
        exit 1
    }

    check_program find
    find /tmp -maxdepth 1 -mindepth 1            > /dev/null 2>&1 || {
        echo "'find' on your system does not support the '--maxdepth' and"
        echo "'--mindepth' options"
        echo "You might not have the GNU version of 'find'"
        echo "Aborting"
        unlock_destination
        exit 1
    }

    check_program date
    date -d 20030303                             > /dev/null 2>&1 || {
        echo "'date' on your system does not support the '--date' option"
        echo "You might not have the GNU version of 'date'"
        echo "Aborting"
        unlock_destination
        exit 1
    }
}

check_system()
{
    if test -n "${backup_destination}" && test -n "${tmpdir}" ; then

        if test "$(stat -c %d "${backup_destination}" 2> /dev/null)" != "$(stat -c %d "${tmpdir}" 2> /dev/null)" ; then
            echo "tmpdir is not on the same volume as destination"
            unlock_destination
            exit 1
        fi

        touch /tmp/bontmia_test_file.$$              > /dev/null 2>&1 || {
            echo "Could not create a temporary file on /tmp"
            echo "Please make sure that /tmp is writable"
            echo "Aborting"
            unlock_destination
            exit 1
        }
        rm -f /tmp/bontmia_test_file.$$              > /dev/null 2>&1

        tmpfile=${tmpdir}/bontmia_test_file.$$
        touch "$tmpfile"                             > /dev/null 2>&1 || {
            echo "Could not create a temporary file on ${tmpdir}"
            echo "Please make sure that ${tmpdir} is writable"
            echo "Aborting"
            unlock_destination
            exit 1
        }

        ln    "${tmpfile}" "${tmpfile}.hardlink"     > /dev/null 2>&1 || {
            rm -f "${tmpfile}" "${tmpfile}.hardlink" > /dev/null 2>&1
            echo "Could not create a hard link on ${tmpdir}"
            echo "Please make sure that the filesystem supports hard links"
            echo "Aborting"
            unlock_destination
            exit 1
        }
        rm -f "${tmpfile}" "${tmpfile}.hardlink"     > /dev/null 2>&1
        unset tmpfile

    fi

    if test -n "${cipher}" && test "$(ssh $cipher 2>&1| grep -c 'Unknown cipher type')" != "0" ; then
        echo "This cipher (${cipher}) is not supported by your local ssh version"
        echo "Aborting"
        unlock_destination
        exit 1
    fi
}


#################################################################

check_for_programs

if test "x$*" = x; then
    print_usage
fi

current_dir=$(pwd)

filter_minutes="3"
filter_hours="24"
filter_days="7"
filter_weeks="4"
filter_monthly="12"
filter_years="0"
backup_dirs=()
exit_status="0"
do_del_old="no"
port="22"
identity=""
excludefrom=""
rsyncpath=""
stats=""
compression=""
cipher=""
rotation=""
dryrun="no"

while [ $# -gt 0 ]; do

    case "$1" in
  ( "--dryrun" )
      shift
      dryrun="yes";;
  ( "--rotation" )
      shift
      rotation=$(echo $1 | perl -e '$_=<STDIN>; m/^([0-9]*)minutes([0-9]*)hours([0-9]*)days([0-9]*)weeks([0-9]*)month([0-9]*)years$/ || exit 1;
print "minutes:$1\n";
print "hours:$2\n";
print "days:$3\n";
print "weeks:$4\n";
print "month:$5\n";
print "years:$6\n";
') || {
    echo "the option to rotation were not right!"
    print_usage
}
      filter_minutes=$(echo "${rotation}" | grep minutes | cut -f2 -d':')
      filter_hours=$(  echo "${rotation}" | grep hours   | cut -f2 -d':')
      filter_days=$(   echo "${rotation}" | grep days    | cut -f2 -d':')
      filter_weeks=$(  echo "${rotation}" | grep weeks   | cut -f2 -d':')
      filter_monthly=$(echo "${rotation}" | grep month   | cut -f2 -d':')
      filter_years=$(  echo "${rotation}" | grep years   | cut -f2 -d':')
      do_del_old="yes";
      shift;;
  ( "--port" )
      shift
      port="$1"
      shift;;
  ( "--identity" )
      shift
      identity="-i $1"
      shift;;
  ( "--exclude-from" )
      shift
      excludefrom="$1"
      shift;;
  ( "--sudo" )
      shift
      rsyncpath="sudo rsync";;
  ( "--stats" )
      shift
      stats="--stats";;
  ( "--bwlimit" )
      shift
      bwlimit="--bwlimit=$1"
      shift;;
  ( "--temp" )
      shift
      tmpdir="$1"
      shift;;
  ( "--compression" )
      compression="-z"
      shift;;
  ( "--cipher" )
      shift
      cipher="-c $1"
      shift;;
  ( "--dest" )
      shift;
      backup_destination="$(knead_dest_path "$1")";
      tmpdir=${tmpdir:-"$backup_destination"}
      if ! test -d "$1"; then
          echo "Destination dir $backup_destination does not exist or is not a directory"
          exit 1
      fi
      shift;;
  ( [^-]* ) # The rest is sources
      if test "x$1" = "x"; then
          echo "Missing source directories"
          exit 1
      fi
      for dir in "$@"; do
          if ! echo "$dir" | grep ":" >/dev/null; then
              remotehost="$(hostname)"
              dir="$remotehost:$(knead_source_path "${dir}")"
          else
              backuppath="$(echo "${dir}" | cut -f2- -d':')"
              if echo "$dir" | grep "@" >/dev/null; then
                  remotehost=$(echo "${dir}" | cut -f1 -d':' | cut -f2 -d'@')
                  remoteuser=$(echo "${dir}" | cut -f1 -d':' | cut -f1 -d'@')
              else
                  remotehost=$(echo "${dir}" | cut -f1 -d':')
                  remoteuser=$(whoami)
              fi

              if echo "${dir}" | cut -f2- -d':' | grep "^/" >/dev/null; then
                  absolutepart=""
              else
                  absolutepart="$(ssh "${remoteuser}@${remotehost}" pwd)/"
              fi

              dir="${remoteuser}@${remotehost}:${absolutepart}${backuppath}"
          fi

          backup_dirs+=("$(knead_source_path "${dir}")")

      done
      shift $#;;
  ( * )
      print_usage
      exit 1;;
    esac
done


rsync_options="-av ${compression} --force --relative --hard-links --delete ${bwlimit} ${stats}"

# to speed up checking for files outside the backup areas
bdirmatch=$(
    first="yes"
    printf "^("
    for dir in "${backup_dirs[@]}"; do
        if test "${first}" = "yes"; then
            if echo "${dir}" | grep ":" >/dev/null; then
                dir_wo_user=$(echo "${dir}" | cut -f2- -d'@')
                printf "./%s/" "$dir_wo_user"
            else
                printf ".%s/" "$dir"
            fi
            first="no"
        else
            if echo "${dir}" | grep ":" >/dev/null; then
                dir_wo_user=$(echo "${dir}" | cut -f2- -d'@')
                printf "|./%s/" "$dir_wo_user"
            else
                printf '|.%s/' "$dir"
            fi
        fi
    done
    printf ")"
)

echo "bdirmatch: ${bdirmatch}"

check_system

lock_destination

if test ${#backup_dirs[@]} -gt 0; then
    make_backup
fi

if test "x${do_del_old}" = "xyes"; then
    delete_old_backup
fi

if test "x${stats}" != "x"; then
    output_rsync_stats
fi

unlock_destination
exit $exit_status
